package fr.baretto.ollamassist.chat.rag;import com.intellij.openapi.Disposable;import com.intellij.openapi.project.Project;import com.intellij.openapi.vfs.VirtualFile;import com.intellij.openapi.vfs.VirtualFileEvent;import com.intellij.openapi.vfs.VirtualFileListener;import com.intellij.openapi.vfs.VirtualFileManager;import com.intellij.util.messages.MessageBusConnection;import dev.langchain4j.data.document.loader.FileSystemDocumentLoader;import dev.langchain4j.data.segment.TextSegment;import dev.langchain4j.store.embedding.EmbeddingStoreIngestor;import fr.baretto.ollamassist.chat.ui.Context;import fr.baretto.ollamassist.events.StoreNotifier;import lombok.extern.slf4j.Slf4j;import org.jetbrains.annotations.NotNull;import java.util.Collections;import java.util.List;import java.util.Set;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.TimeUnit;@Slf4jpublic class ProjectFileListener implements Disposable, StoreNotifier {    private static final IndexRegistry INDEX_REGISTRY = new IndexRegistry();    private final Project project;    private final LuceneEmbeddingStore<TextSegment> store;    private final Set<String> currentModifiedFiles = Collections.newSetFromMap(new ConcurrentHashMap<>());    private final Debouncer<String> debouncer = new Debouncer<>(2, TimeUnit.SECONDS);    private final VirtualFileListener virtualFileListener;    private final MessageBusConnection connection;    public ProjectFileListener(@NotNull Project project, LuceneEmbeddingStore<TextSegment> store) {        this.project = project;        this.store =store;        this.virtualFileListener = createFileListener();        this.connection = project.getMessageBus().connect();        setupFileWatcher();        subscribeToEvents();    }    private void setupFileWatcher() {        VirtualFileManager.getInstance().addVirtualFileListener(virtualFileListener, this);    }    private VirtualFileListener createFileListener() {        return new VirtualFileListener() {            @Override            public void fileCreated(@NotNull VirtualFileEvent event) {                handleFileCreated(event);            }            @Override            public void contentsChanged(@NotNull VirtualFileEvent event) {                handleContentsChanged(event);            }            @Override            public void fileDeleted(@NotNull VirtualFileEvent event) {                handleFileDeleted(event);            }        };    }    private void subscribeToEvents() {        connection.subscribe(StoreNotifier.TOPIC, this);    }    public void clear() {        store.removeAll();        INDEX_REGISTRY.removeProject(project.getName());        load();    }    private void handleFileCreated(@NotNull VirtualFileEvent event) {        debouncer.debounce(event.getFile().getName(), () -> {            VirtualFile file = event.getFile();            if (file.getLength() > 0) {                processFile(event.getFile().getPath(), "creation");            }        });    }    private void handleContentsChanged(@NotNull VirtualFileEvent event) {        debouncer.debounce(event.getFile().getName(), () -> {            store.removeAll(new IdEqualsFilter(event.getFileName()));            if (event.getFile().getLength() > 0) {                processFile(event.getFile().getPath(), "modification");                currentModifiedFiles.remove(event.getFileName());            }        });    }    private void handleFileDeleted(@NotNull VirtualFileEvent event) {        store.removeAll(new IdEqualsFilter(event.getFileName()));    }    private void processFile(String filePath, String operation) {        try {            EmbeddingStoreIngestor.ingest(                    List.of(FileSystemDocumentLoader.loadDocument(filePath)),                    store            );        } catch (Exception e) {            log.error("Error during file {}: {}", operation, e.getMessage());        }    }    public void load() {        if (!INDEX_REGISTRY.isIndexed(project.getName())) {            new InitEmbeddingStoreTask(project, store).queue();        }    }    public void forceLoad(Context context) {        store.removeAll();        INDEX_REGISTRY.removeProject(project.getName());        new InitEmbeddingStoreTask(project, store).queue();    }    @Override    public void dispose() {        connection.disconnect();        debouncer.shutdown();        VirtualFileManager.getInstance().removeVirtualFileListener(virtualFileListener);    }}